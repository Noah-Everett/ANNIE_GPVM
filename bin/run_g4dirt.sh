#! /usr/bin/env bash

b0=`basename $0`
export SCRIPTPATH=`dirname $0`
# make script path absolute and resolve symlinks
#export SCRIPTPATH=`readlink -f ${SCRIPTPATH} `

# allow executable in current path
# in case we copied them in along with this script
export PATH=${PATH}:.

export VERSION=2015-10-14a
echo " "
echo "$0 $@"
echo "$b0 VERSION $VERSION"
echo " "

export INDIR=""
export OUTDIR=""
export VERBOSE=0
export RWHNODE=0
export RUNBASE=""  # starting run number
export BATCH=""
export SEED="" # random # seed

export GDML=annie_v01.gdml

export NEVT="-1"
export NREPEAT="1"
export USEPHYLIST="FTFP_BERT_HP"

# remake files generated by this script
RMGEN=1


##########################################################################
usage() {
cat >&2 <<EOF
${b0} -r RUNBASE [ -n NEVT ] [ --repeat NREPEAT ] -i INDIR -o OUTDIR

  Assumes input file name form:  gntp.\${RUNNUM}.ghep.root

Run a g4annie_dirt_flux job
   -i | --indir=IDIR       input directory  (usually /pnfs/annie/...)
   -o | --outdir=ODIR      output directory (usually /pnfs/annie/..)
   -r | --run=RUNNUM       run number [$RUNBASE+\${PROCESS}]
   -n | --nevt=NEVENTS     limit by number of events [$NEVT] (-1=all)
   -R | --repeat=NREPEAT   re-run NEVENTS, NREPEAT times [${NREPEAT}]
   -g | --gdml=GDMLFILE    geometry file [${GDML}]
   -p | --physics=PHYLIST  PhysicsList name [${USEPHYLIST}]
   -b | --batch=BATCH      Use all infiles of form \${{INDIR}/gntp.\${RUNNUM}\*.ghep.root

   -v                      increase verbosity
   -h | --help             this output
   
EOF
}

##########################################################################
process_args() {

  printusage=0
  dorock=0

  # longarg "::" means optional arg, if not supplied given as null string
  # use this for targfile lowth peanut
  TEMP=`getopt -n $0 -s bash -a \
     --longoptions="help batch indir: outdir: run: nevt: repeat: gdml: physics:" \
     -o hvbi:o:r:n:R:g:p:-: -- "$@" `
  eval set -- "${TEMP}"
  unset TEMP
  while [ $# -gt 0 ]; do
    if [ $VERBOSE -gt 0 ]; then echo "arg processing \$1=$1 \$2=$2" ; fi
    case "$1" in
      "--"              ) shift;                  break  ;;
      -h | --help       ) printusage=1                   ;;
      -v                ) let VERBOSE=${VERBOSE}+1       ;;
      -i | --indir      ) export INDIR="$2";      shift  ;;
      -o | --outdir     ) export OUTDIR="$2";     shift  ;;
      -r | --run        ) export RUNBASE="$2";    shift  ;;
      -n | --nevt       ) export NEVT="$2";       shift  ;;
      -R | --repeat     ) export NREPEAT="$2";    shift  ;;
      -g | --gdml       ) export GDML="$2";       shift  ;;
      -p | --physics    ) export USEPHYLIST="$2"; shift  ;;
      -b | --batch      ) export BATCH="true"            ;;
      -*                ) echo "unknown flag $opt ($1)"
                          usage
                          ;;
     esac
     shift  # eat up the arg we just used
  done

  usage_exit=0;
  
  if [ -z "$PROCESS" ]; then PROCESS=0; fi # not running in condor
  if [ -z "$INDIR" ]; then
    echo "$b0: you must set the input directory using the -i flag"
    usage_exit=127
  fi
  if [ -z "$OUTDIR" ]; then
    echo "$b0: you must set the output directory using the -o flag"
    usage_exit=127
  fi
  if [ -z "$RUNBASE" ]; then
    echo "$b0: you must set the starting run number using the -r flag"
    usage_exit=127
  fi
  let RUN=${RUNBASE}+${PROCESS}
  export RUN

  # show the defaults correctly now
  if [ $printusage -gt 0 -o ${usage_exit} -ne 0 ]; then
    echo " "
    usage
    if [ $printusage -gt 1 ]; then
      helpfid
    fi
    return ${usage_exit}
  fi

  if [ $VERBOSE -gt 2 ]; then
    set -o xtrace
  fi

}
##########################################################################
##########################################################################
# functions to setup a version of genie / geant4
setup_setup ()
{
#  # bootstrap ups
#  node=`uname -n | cut -d. -f1`
#  if [ "$node" == "mac-124096" ]; then
#    # robert's laptop
#    export RWHNODE=1
#    echo source /Users/${USER}/Work/externals/setup;
#         source /Users/${USER}/Work/externals/setup;
#    ALTDIR=/Users/${USER}/Work/altups;
#    if [ -d $ALTDIR ]; then
#      export PRODUCTS=${ALTDIR}:${PRODUCTS};
#    fi
#  else
#    # try CVMFS
#    CVMFS_SETUP=/cvmfs/fermilab.opensciencegrid.org/products/genie/externals/setup
#    CVMFS_AUX=/cvmfs/fermilab.opensciencegrid.org/products/common/db
#    BA_SETUP=/grid/fermiapp/products/genie/externals/setup
#    BA_AUX=/grid/fermiapp/products/common/db/
#    /cvmfs/grid.cern.ch/util/cvmfs-uptodate ${CVMFS_SETUP}
#    cvmfs_status=$?
#    if [ ${cvmfs_status} -eq 0 ]; then
#      echo source ${CVMFS_SETUP}
#           source ${CVMFS_SETUP}
#        export PRODUCTS=${PRODUCTS}:${CVMFS_AUX}
#    else
#      # try bluearc
#      echo "$b0: CVMFS installation not available, try BlueArc"
#      if [ -f ${BA_SETUP} ]; then
#        echo source ${BA_SETUP}
#             source ${BA_SETUP}
#        export PRODUCTS=${PRODUCTS}:${BA_AUX}
#      else
#        echo "$b0: failed to find a genie UPS installation"
#        echo "    CVMFS_SETUP ${CVMFS_SETUP}"
#        echo "    BA_SETUP    ${BA_SETUP}"
#        exit 127
#      fi
#    fi
#  fi
  source /grid/fermiapp/products/common/etc/setup
  export PRODUCTS=${PRODUCTS}:/grid/fermiapp/products/larsoft:/grid/fermiapp/products/nova/externals:/grid/fermiapp/products/minerva/db
  
  echo "Setting up geant4"
      setup geant4 v4_10_3_p03c -q e15:debug
  echo "Setting up genie"
      setup genie v2_12_10b -q debug:e15
  echo "Setting up genie_phyopt"
      setup genie_phyopt v2_12_10 -q dkcharmtau
  echo "Setting up genie_xsec"
      setup genie_xsec v2_12_10 -q DefaultPlusMECWithNC
#  echo "Setting up ifdh"
#      setup ifdh
  
  echo "$b0: using PRODUCTS=${PRODUCTS}"
}
#setup_genie ()
#{
#    setup_setup
#
#    setup cmake v3_2_1
#    setup geant4 v4_9_6_p04a -q e7:debug
#    if [ ${RWHNODE} -ne 0 ]; then
#      setup getopt v1_1_6
#      setup pandora v01_01_00b -q debug:e7:nu
#      setup dk2nu v01_01_03b -q debug:e7
#    else
#      setup pandora v01_01_00a -q debug:e7:nu
#      setup dk2nu v01_01_03a -q debug:e7
#      setup ifdhc   # for copying geometry & flux files
#    fi
#    setup genie_phyopt v2_8_6 -q dkcharmtau
#    setup genie_xsec v2_8_6 -q default
#    setup cstxsd v4_0_0b -q e7
#    setup boost v1_57_0 -q debug:e7
#
#    export IFDH_CP_MAXRETRIES=2  # default 8 tries is silly
#}
###########################################################################

process_args "$@"
if [ $? -ne 0 ]; then
  echo "\`process_args\` returned a non zero value of \"$?\"."
  return 1
fi

setup_setup

#setup_genie   # geant4 along for the ride ...
echo "setup complete"
echo " "

# executable is g4annie_dirt_flux
if [ ${RWHNODE} -eq 0 ]; then 
  export PATH=${PATH}:/annie/app/users/neverett/bin/:.
else
  export PATH=${PATH}:/Users/rhatcher/Work/ANNIE/bin:.
fi
hash -r  # rehash 
echo "PATH=${PATH}"
echo "ls -l /annie/app/users/neverett/bin"
ls -l /annie/app/users/rhatcher/bin
echo "ls -l /minos/app/users/rhatcher/annie/bin"
ls -l /minos/app/users/rhatcher/annie/bin

EXETRYLIST="g4annie_dirt_flux"
for etry in $EXETRYLIST
do
  EXE=`which $etry 2>/dev/null`
  if [ -n "$EXE" ]; then break; fi
done
if [ -z "$EXE" ]; then
  # not in current path ... try to fetch something from BlueArc
  echo "$b0: couldn't find an appropriate executable in standard path"
  echo "$b0: try using 'ifdh cp' from /annie/app/users/rhatcher/bin/"
  for etry in $EXETRYLIST
  do
    # trouble seeing annie disks on worker nodes via 'ifdh cp'
    # use minos as backup location
    for EXELOC in /pnfs/annie/persistent/users/rhatcher/bin
#RWH#/annie/app/users/rhatcher/bin \
#RWH#/minos/app/users/rhatcher/annie/bin
    do 
      echo "$b0: try using 'ifdh cp' $etry from ${EXELOC}"
      echo ifdh cp ${EXELOC}/$etry $etry
           ifdh cp ${EXELOC}/$etry $etry
      if [ ! -f $etry ]; then continue; fi
      chmod +x $etry
      hash -r  # rehash 
      EXE=`which $etry 2>/dev/null`
    done
    if [ -n "$EXE" ]; then 
      break
    else
       echo "$b0: copied exe, but 'which' doesn't see it"
    fi
  done
fi
if [ -z "$EXE" ]; then
  echo "$b0: failed to find either gevgen_numi_rock or gevgen_fnal executable"
  exit 127
fi
echo "using $EXE"

## do I have a local copy of the geometry?
#GDMLBASE=`basename $GDML`
#if [ ! -f $GDMLBASE ]; then
#  # no?
#  echo "$b0: no local copy of geometry, attempt to fetch one"
#  # try simple copy
#  cp $GDML $GDMLBASE
#  if [ ! -f $GDMLBASE ]; then
#    # still no?
#    if [ ${RWHNODE} -eq 0 ]; then
#      # is /annie/data not visible on worker nodes via 'ifdh cp'?
#      # use pnfs (with minos as a backup)
#      for GEOMLOC in /pnfs/annie/persistent/geometry
##\
##                     /annie/data/geometry \
##                     /minos/data/users/rhatcher/annie/geometry
#      do 
#        echo "$b0: try using 'ifdh cp' from ${GEOMLOC}"
#        echo ifdh cp ${GEOMLOC}/$GDMLBASE $GDMLBASE
#             ifdh cp ${GEOMLOC}/$GDMLBASE $GDMLBASE
#          if [ -f $GDMLBASE ]; then break; fi
#      done
#    else
#      cp /Users/rhatcher/Work/ANNIE/geometry/$GDMLBASE $GDMLBASE
#    fi
#  fi
#fi
#if [ -f $GDMLBASE ]; then
#  echo "$b0: using geoemtry file $GDMLBASE "
#else
#  echo "$b0: still no geoemtry file ... abort "
#  ISAFS=`echo $PWD | cut -d/ -f2 | grep -c afs`
#  if [ $ISAFS -ne 0 ]; then
#    echo "$b0: working directory can't be AFS (PWD=$PWD)"
#  fi
#  exit 127
#fi

INFILE=gntp.${RUN}.ghep.root
OUTFILE=annie_tank_flux.${RUN}.root
OUTLOG=annie_tank_flux.${RUN}.log

#ISPNFS=`echo $INDIR | grep -c pnfs`
#echo "ISPNFS=${ISPNFS} INDIR=${INDIR} INFILE=${INFILE}"
#if [ ${ISPNFS} -gt 0 -o ! -f ${INDIR}/${INFILE} ]; then
#  echo ifdh cp ${INDIR}/${INFILE} ${INFILE}
#       ifdh cp ${INDIR}/${INFILE} ${INFILE}
#else
#  echo cp ${INDIR}/${INFILE} ${INFILE}
#       cp ${INDIR}/${INFILE} ${INFILE}
#fi

REPFLG=""
if [ -n "${NREPEAT}" -a "${NREPEAT}" -gt 1 ]; then
  REPFLG="--repeat ${NREPEAT}"
fi

echo "ls -l `pwd`"
ls -l .
echo " "
echo " "

echo " "
NOWS=`date "+%s"`
DATES=`date "+%Y-%m-%d %H:%M:%S"`
echo "checkpoint start @ ${DATES} s=${NOWS}"
echo " "

echo "BATCH: ${BATCH}"

if [ -n "${BATCH}" ]; then
  echo "Using batch method"
  for INFILE in ${INDIR}/gntp.${RUN}*.ghep.root; do
    echo "INFILE = ${INFILE_B}"
    if [ -f "$INFILE" ]; then
cp ${INFILE} .
INFILE=$(basename ${INFILE})
FILENUM=${INFILE#gntp.}
echo $FILENUM
FILENUM=${FILENUM%.ghep.root}
echo $FILENUM
OUTLOG=annie_tank_flux.${FILENUM}.log
OUTFILE=annie_tank_flux.${FILENUM}.root
echo $OUTFILE
echo $EXE --batch -n $NEVT ${REPFLG} -g $GDML --physics=${USEPHYLIST} \
     -i ${INFILE} -o ${OUTFILE}
     $EXE --batch -n $NEVT ${REPFLG} -g $GDML --physics=${USEPHYLIST} \
     -i ${INFILE} -o ${OUTFILE} > ${OUTLOG} 2>&1
cat ${OUTLOG}
mv ${OUTLOG} ${OUTDIR}
mv ${OUTFILE} ${OUTDIR}
rm currentEvent.rndm
rm currentRun.rndm
rm ${INFILE}
    fi
  done
else
echo $EXE --batch -n $NEVT ${REPFLG} -g $GDML --physics=${USEPHYLIST} \
     -i ${INFILE} -o ${OUTFILE}
     $EXE --batch -n $NEVT ${REPFLG} -g $GDML --physics=${USEPHYLIST} \
     -i ${INFILE} -o ${OUTFILE} > ${OUTLOG} 2>&1
cat ${OUTLOG}
mv ${OUTLOG} ${OUTDIR}
mv ${OUTFILE} ${OUTDIR}
rm currentEvent.rndm
rm currentRun.rndm
rm ${INFILE}
fi

echo " "
NOWF=`date "+%s"`
DATEF=`date "+%Y-%m-%d %H:%M:%S"`
let DS=${NOWF}-${NOWS}
echo "checkpoint finish @ ${DATEF} s=${NOWF}  ds=${DS}"
echo " "

##########################################################################
# here's where copy-back code should live
# use 'ifdh cp <from> <to>' for grid compatibility
# files of interest
#    annie_tank_flux.${RUN}.root      # primary output
#    annie_tank_flux.${RUN}.log       # log
#

#  for f in ${OUTFILE} ${OUTLOG}
#  do 
#    ifdh cp ${f} ${OUTDIR}/${f}
#  done

# end-of-script
